@namespace FileFlows.Client.Pages
@using Humanizer
@using Globals = FileFlows.ServerShared.Globals
@inherits InputRegister

@page "/settings"

<PageView>

    <Head>
        <button id="settings-save" class="btn" @onclick=@Save>
            @if(IsSaving)
            {
                @lblSaving
            }
            else
            {
                @lblSave
            }
        </button>

        <button @onclick=@OpenHelp  class="btn">
            @lblHelp
        </button>
    </Head>

    <Body>
        <CascadingValue IsFixed="true" Value="this">
            <div class="settings">
                <FlowTabs>
                    <FlowTab Title="@lblGeneral">
                        <InputDropDown CustomXID="Language" @bind-Value="@Language" Options=@LanguageOptions 
                                       Label="Pages.Settings.Fields.Language" AllowClear="false" />
                        
                        <InputNumber @bind-Value="@Model.DelayBetweenNextFile" Label="Pages.Settings.Fields.DelayBetweenNextFile" Min=0 Max=60000/>
                        @{
                        if (Model.ProcessFileCheckInterval < 5)
                            Model.ProcessFileCheckInterval = 5;
                        }
                        <InputNumber @bind-Value="@Model.ProcessFileCheckInterval" Label="Pages.Settings.Fields.ProcessFileCheckInterval" Min=5 Max=86400/>
                        <InputSwitch @bind-Value="@Model.KeepFailedFlowTempFiles" Label="Pages.Settings.Fields.KeepFailedFlowTempFiles"/>
                        @if (Profile.ServerOS is OperatingSystemType.Docker)
                        {
                            <InputSwitch @bind-Value="@Model.DockerModsOnServer" Label="Pages.Settings.Fields.DockerModsOnServer"/>
                        }
                        @if (IsLicensed)
                        {
                            <InputSwitch @bind-Value="@Model.DisableTelemetry" Inverse="@true" Label="Pages.Settings.Fields.Telemetry" OnChangedValue="OnTelemetryChange"/>
                        }
                    </FlowTab>
                    <FlowTab Title=@lblLogging>
                        <InputSwitch @bind-Value="@Model.LogQueueMessages" Label="Pages.Settings.Fields.LogQueueMessages"/>
                        @if (IsLicensed)
                        {
                            <InputSwitch @bind-Value="@Model.LogEveryRequest" Label="Pages.Settings.Fields.LogEveryRequest"/>
                            <InputNumber @bind-Value="@Model.LogFileRetention" Label="Pages.Settings.Fields.LogFileRetention" Min=1 Max=100/>
                        }
                        <InputSwitch @bind-Value="@Model.ShowFileAddedNotifications" Inverse="false" Label="Pages.Settings.Fields.ShowFileAddedNotifications"/>
                        <InputSwitch @bind-Value="@Model.HideProcessingStartedNotifications" Inverse="true" Label="Pages.Settings.Fields.HideProcessingStartedNotifications"/>
                        <InputSwitch @bind-Value="@Model.HideProcessingFinishedNotifications" Inverse="true" Label="Pages.Settings.Fields.HideProcessingFinishedNotifications"/>
                    </FlowTab>
                    <FlowTab Title="@lblUpdates" Visible="@LicensedFor(LicenseFlags.AutoUpdates)">
                        @if (LicensedFor(LicenseFlags.AutoUpdates))
                        {
                            <InputButton Label="Pages.Settings.Fields.CheckForUpdateNow" Text="@lblCheckNow" OnClick=@CheckForUpdateNow/>

                            <InputSwitch @bind-Value="@Model.AutoUpdate" Label="Pages.Settings.Fields.AutoUpdate"/>
                            <InputSwitch @bind-Value="@Model.AutoUpdatePlugins" Label="Pages.Settings.Fields.AutoUpdatePlugins"/>
                            <InputSwitch @bind-Value="@Model.AutoUpdateNodes" Label="Pages.Settings.Fields.AutoUpdateNodes"/>
                        }
                    </FlowTab>
                    <FlowTab Title="@lblFileServer" Visible="@LicensedFor(LicenseFlags.FileServer)">
                        <p style="white-space: pre-wrap">@lblFileServerDescription</p>
                        <hr/>
                        <InputSwitch @bind-Value="@Model.FileServerDisabled" Inverse="true" Label="Pages.Settings.Fields.FileServer.Enabled"/>
                        @if (Profile.ServerOS is OperatingSystemType.Linux or OperatingSystemType.Docker)
                        {
                            <InputNumber @bind-Value="@Model.FileServerFilePermissions" Label="Pages.Settings.Fields.FileServer.FilePermissions" Disabled="Model.FileServerDisabled" Max="777" ZeroAsEmpty="true" Placeholder="@Globals.DefaultPermissionsFile.ToString("D3")"/>
                            <InputNumber @bind-Value="@Model.FileServerFolderPermissions" Label="Pages.Settings.Fields.FileServer.FolderPermissions" Disabled="Model.FileServerDisabled" Max="777" ZeroAsEmpty="true" Placeholder="@Globals.DefaultPermissionsFolder.ToString("D3")"/>
                            <InputText @bind-Value="@Model.FileServerOwnerGroup" Label="Pages.Settings.Fields.FileServer.OwnerGroup" Disabled="Model.FileServerDisabled"/>
                        }
                        <InputTextArea @bind-Value="@Model.FileServerAllowedPathsString" Label="Pages.Settings.Fields.FileServer.AllowList" Disabled="Model.FileServerDisabled"/>
                    </FlowTab>
                    <FlowTab Title="@lblDatabase">
                        <p>@lblDbDescription</p>
                        <hr />
                        <InputSelect @bind-Value="@DbType" Options=@DbTypes Label="Pages.Settings.Fields.Database.Type" AllowClear="false"/>
                        @if (Model.DbType is DatabaseType.Sqlite or DatabaseType.SqliteNewConnection or DatabaseType.SqliteNonCached == false)
                        {
                            <InputText @bind-Value=@Model.DbServer Label="Pages.Settings.Fields.Database.Server" Validators=@RequiredValidator/>
                            <InputText @bind-Value=@Model.DbName Label="Pages.Settings.Fields.Database.Name" Validators=@RequiredValidator/>
                            <InputNumber @bind-Value=@Model.DbPort Label="Pages.Settings.Fields.Database.Port" Validators=@RequiredValidator Min="1" Max="65535" Help="@GetDatabasePortHelp()"/>
                            <InputText @bind-Value=@Model.DbUser Label="Pages.Settings.Fields.Database.User" Validators=@RequiredValidator/>
                            <InputPassword @bind-Value=@Model.DbPassword Label="Pages.Settings.Fields.Database.Password" Validators=@RequiredValidator/>
                            @if (Model.DbServer != OriginalServer || Model.DbName != OriginalDatabase || Model.DbType != OriginalDbType)
                            {
                                <InputSwitch @bind-Value="@Model.RecreateDatabase" Label="Pages.Settings.Fields.Database.RecreateDatabase"/>
                            }

                            <InputSwitch @bind-Value="@Model.DontBackupOnUpgrade" Label="Pages.Settings.Fields.Database.DontBackupOnUpgrade" OnChangedValue="OnDbBackupChange"/>
                        }
                        <div class="btn-test">
                            @if (Model.DbType is DatabaseType.Sqlite or DatabaseType.SqliteNewConnection or DatabaseType.SqliteNonCached == false)
                            {
                                <button class="btn" @onclick=@TestDbConnection>@lblTest</button>
                            }
                            <button class="btn" @onclick=@Restart>@lblRestart</button>
                        </div>
                    </FlowTab>
                    <FlowTab Title="@lblSecurity" Visible="@(LicensedFor(LicenseFlags.UserSecurity))">
                        <p style="white-space: pre-wrap">@((MarkupString)mdSecurityDescription)</p>
                        <hr/>
                        <InputSelect @bind-Value="@Security" AllowClear="false"
                                     Disabled="@((Profile.ConfigurationStatus & ConfigurationStatus.Users) != ConfigurationStatus.Users)"
                                     Options=@SecurityOptions Label="Pages.Settings.Fields.Security.Mode"/>
                        @if (Model.Security != SecurityMode.Off)
                        {
                            <InputAccessToken @bind-Value="Model.AccessToken" Label="Pages.Settings.Fields.Security.AccessToken"/>
                            <InputPeriod @bind-Value="Model.TokenExpiryMinutes" Label="Pages.Settings.Fields.Security.TokenExpiryMinutes" ShowWeeks="false"/>
                        }

                        @if (Model.Security == SecurityMode.OpenIdConnect)
                        {
                            <hr/>

                            <InputText @bind-Value="@Model.OidcAuthority" Label="Pages.Settings.Fields.Security.Authority"/>
                            <InputText @bind-Value="@Model.OidcClientId" Label="Pages.Settings.Fields.Security.ClientId"/>
                            <InputText @bind-Value="@Model.OidcClientSecret" Label="Pages.Settings.Fields.Security.ClientSecret"/>
                            <InputText @bind-Value="@Model.OidcCallbackAddress" Label="Pages.Settings.Fields.Security.CallbackAddress" Placeholder="@Model.OidcCallbackAddressPlaceholder"/>
                        }
                        else
                        {
                            <hr/>

                            <InputNumber @bind-Value="@Model.LoginMaxAttempts" Label="Pages.Settings.Fields.Security.MaxAttempts"/>
                            <InputNumber @bind-Value="@Model.LoginLockoutMinutes" Label="Pages.Settings.Fields.Security.LockoutMinutes"/>
                        }
                    </FlowTab>
                    <FlowTab Title="@lblEmail">
                        <p>@lblEmailDescription</p>
                        <hr />
                        <InputText @bind-Value="@Model.SmtpServer" Label="Pages.Settings.Fields.Smtp.Server"/>
                        <InputNumber @bind-Value="@Model.SmtpPort" Label="Pages.Settings.Fields.Smtp.Port" Min="1" Max="65535"/>
                        <InputSelect @bind-Value="@SmtpSecurity" Options=@SmtpSecurityTypes Label="Pages.Settings.Fields.Smtp.Security" AllowClear="false"/>
                        <InputText @bind-Value="@Model.SmtpUser" Label="Pages.Settings.Fields.Smtp.User"/>
                        <InputPassword @bind-Value="@Model.SmtpPassword" Label="Pages.Settings.Fields.Smtp.Password"/>
                        <InputText @bind-Value="@Model.SmtpFrom" Label="Pages.Settings.Fields.Smtp.From"/>
                        <InputText @bind-Value="@Model.SmtpFromAddress" Label="Pages.Settings.Fields.Smtp.FromAddress"/>
                    </FlowTab>
                    <FlowTab Title="@lblLicense">
                        <p>Here you can enter your license key to enable additional features
                            See <a href="https://fileflows.com/pricing" target="_blank" rel="noreferrer">FileFlows.com</a> for more information.</p>
                        <InputText @bind-Value=@Model.LicenseEmail Label="Pages.Settings.Fields.License.Email"/>
                        <InputText @bind-Value=@Model.LicenseKey Label="Pages.Settings.Fields.License.Key"/>
                        <hr/>
                        <InputText @bind-Value=@Model.LicenseStatus Label="Pages.Settings.Fields.License.Status" ReadOnly="true"/>
                        <InputText Value=@Model.LicenseLevel.Humanize() Label="Pages.Settings.Fields.License.Level" ReadOnly="true"/>
                        <InputText Value=@Model.LicenseProcessingNodes.ToString() Label="Pages.Settings.Fields.License.ProcessingNodes" ReadOnly="true"/>
                        @if (IsLicensed)
                        {
                            <InputText Value=@Model.LicenseExpiryDate.ToString("f") Label="Pages.Settings.Fields.License.ExpiryDate" ReadOnly="true"/>
                            <InputTextArea @bind-Value=@LicenseFlagsString Label="Pages.Settings.Fields.License.Flags" ReadOnly="true" Rows="10"/>
                        }
                    </FlowTab>
                </FlowTabs>
            </div>
        </CascadingValue>
    </Body>

</PageView>