@namespace FileFlows.Client.Components.Inputs
@using FileFlows.Client.Components.Dialogs
@inherits Input<string>

<InputWrapper Input="@this">
    <div class="input-icon-picker-wrapper">
        @if (string.IsNullOrEmpty(Value) == false && Value.StartsWith(':') == false)
        {
            @if (Value.StartsWith("data:"))
            {
                <img src="@Value" @onclick="@Choose" />
            }
            else if (Value.StartsWith("svg:"))
            {
                <img src="/icons/@(Value[4..]).svg" @onclick="@Choose" />
            }
            else
            {
                <i class="icon @Icon" style="color: @IconColor" @onclick="@Choose"></i>
            }
        }
        else
        {
            <button class="btn" @onclick=@Choose>Choose</button>
        }
        <Microsoft.AspNetCore.Components.Forms.InputFile @ref="fileInput" id="fileInput" OnChange="HandleFileSelected" style="display:none;" accept="image/*"/>
    </div>
</InputWrapper>

<Modal Title="@lblPickIcon" Visible="@ModalOpened">

    <Body>
    <div class="icon-picker-modal-body">
        <div class="icon-picker-modal-body-top">
            <div class="filter">
                <input type="text" @bind-value="@Filter" @bind-value:event="oninput" placeholder="@lblFilter" />
            </div>
            <div class="@(SvgSelected ? "hide" : "")">
                <FlowColorPicker @bind-Value="@Color"></FlowColorPicker>
            </div>
        </div>
        <ul class="icon-list" style="color:@Color">
            @if (IncludeSvgs)
            {
                foreach (var svg in Svgs)
                {
                    <li @onclick="() => SelectIcon(svg, true)" @ondblclick="() => DblClick(svg, true)"
                        class="@(svg == SelectedIcon ? "selected" : "")">
                        <img src="/icons/@(svg).svg" />
                    </li>
                }
            }
            @foreach (var icon in Icons)
            {
                if (string.IsNullOrEmpty(Filter) == false && icon.Contains(Filter.ToLowerInvariant()) == false)
                {
                    continue;
                }

                <li @onclick="() => SelectIcon(icon)" @ondblclick="() => DblClick(icon)"
                    class="@(icon == SelectedIcon ? "selected" : "")">
                    <i class="@icon"></i>
                </li>
            }
        </ul>
    </div>
    </Body>
    <Footer>
        <div class="icon-picker-modal-footer">
            <button class="btn" @onclick=@Upload>@lblUpload</button>
            <div class="spacer"></div>
            <button class="btn" @onclick="() => DblClick(SelectedIcon, SvgSelected)" disabled="@string.IsNullOrEmpty(SelectedIcon)">@lblSelect</button>
            <button class="btn" @onclick=@Cancel>@lblCancel</button>
        </div>
    </Footer>
</Modal>