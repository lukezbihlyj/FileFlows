@namespace FileFlows.Client.Components.Inputs
@inherits ExecuteFlowElementView

<InputWrapper Input="@this">

    @if(Value?.Any() == true)
    {
        <table class="flowtable">
            <thead>
            <tr>
                <th class="output">@lblOutput</th>
                <th class="name">@lblName</th>
                <th class="node">@lblFlowElement</th>
                <th class="time">@lblTime</th>
                @if (string.IsNullOrEmpty(Log) == false)
                {
                    <th class="view-log"></th>
                }
            </tr>
            </thead>
            <tbody>
            @{
                var collection = Value.ToArray();
                bool hasLog = string.IsNullOrEmpty(Log) == false;
                for(int i=0;i<collection.Length;i++)
                {
                    var item = collection[i];
                    int previousDepth = Math.Max(i > 0 ? collection[i - 1].Depth : item.Depth, 0);
                    int nextDepth = Math.Max(i < collection.Length - 1 ? collection[i + 1].Depth : item.Depth, 0);
                    int currentDepth = Math.Max(item.Depth, 0);

                    bool depthStart = currentDepth < nextDepth;
                    bool depthEnd = currentDepth < previousDepth;
                    bool isFailureFlowInput = item.NodeUid == "FileFlows.BasicNodes.FlowFailure";
                    
                    <tr class="@(item.Output == -1 ? "output-error" : item.Output == 0 ? "output-exit" : "")
@(depthStart ? "depth-start": string.Empty) @(depthEnd ? "depth-end": string.Empty) @(isFailureFlowInput ? "failure-flow-input" : string.Empty)">
                        <td class="output">
                            @item.Output
                        </td>
                        <td class="name">@FormatNodeName(item)</td>
                        <td class="node">@FormatNodeUid(item.NodeUid)</td>
                        @if (item.NodeUid == "FlowStart")
                        {
                            <td class="time"></td>
                            @if (hasLog)
                            {
                                <td class="view-log">
                                    <i class="fas fa-file-alt" @onclick="() => OpenLog(item)" title="@lblViewLog"></i>
                                </td>
                            }
                        }
                        else
                        {
                            <td class="time">@item.ProcessingTime</td>
                            @if (hasLog)
                            {
                                <td class="view-log">
                                    @if (item.NodeUid != "FlowEnd")
                                    {
                                        <i class="fas fa-file-alt" @onclick="() => OpenLog(item)" title="@lblViewLog"></i>
                                    }
                                </td>
                            }
                        }
                    </tr>
                }
            }
            </tbody>
        </table>
    }

</InputWrapper>

@if (PartialLogNode != null)
{
    <div class="editor-wrapper log-partial-viewer ">
        <div class="background-overlay"></div>
        <div id=@ResizerUid class="editor @(Maximised ? "maximised" : "") ">

            <ViContainer Title="@FormatNodeName(PartialLogNode)" FullWidth=@true AlwaysShowTitle=@true Maximise=true OnMaximised=@OnMaximised>

                <Head>
                    <button class="btn" @onclick=@ClosePartialLog>@lblClose</button>
                </Head>

                <Body>
                    <CascadingValue IsFixed="true" Value="this">
                        <div class="fields">
                            <InputLogView Value=@PartialLog />
                        </div>
                    </CascadingValue>
                </Body>
            </ViContainer>
        </div>
    </div>
}