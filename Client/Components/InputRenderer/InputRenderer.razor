@namespace FileFlows.Client.Components

@using FileFlows.Plugin
@using FileFlows.Shared
@using FileFlows.Client.Helpers
@using FileFlows.Shared.Widgets
@using Microsoft.Extensions.Logging
@using System.Collections
@using FileFlows.Plugin.Models
@using FileFlows.Plugin.Types

@{
    string label = string.IsNullOrEmpty(field.Label) == false ? field.Label : IsScript ? FlowHelper.FormatLabel(field.Name) : TypeName + ".Fields." + field.Name;
    if (string.IsNullOrWhiteSpace(field.Placeholder))
    {
        field.Placeholder = Translater.Instant(label + "-Placeholder").EmptyAsNull() ?? string.Empty;
    }

    bool readOnly = GetParameter<bool>(field, "ReadOnly");
    bool hideLabel = GetParameter<bool>(field, "HideLabel");

    @switch (field.InputType)
    {
        case FormInputType.Button:
            {
                var text = Translater.TranslateIfNeeded(label);
                var onclick = GetParameter<EventCallback>(field, nameof(InputButton.OnClick));
                <InputButton Field=@field Text="@text" OnClick="@onclick" />
            }
            break;
        case FormInputType.Color:
        {
            var value = GetValue<string>(field.Name) ?? "";
            <InputColor Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                           Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
        }
            break;
        case FormInputType.Text:
            {
                if (field.ReadOnlyValue is string strValue)
                {
                    <InputText Label="@label" Value="@strValue" ReadOnly=@readOnly 
                               Placeholder="@field.Placeholder" HideLabel=@hideLabel Help=@field.HelpText />
                }
                else
                {
                    var value = GetValue<string>(field.Name) ?? "";
                    <InputText Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                               Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText/>
                }
            }
            break;
        case FormInputType.TextVariable:
            {
                var value = GetValue<string>(field.Name) ?? "";
                <InputTextVariables Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
    Validators=@field.Validators Variables=@field.Variables Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.TextArea:
            {
                var value = GetValue<string>(field.Name) ?? "";
                var variables = GetParameter<bool>(field, "Variables") ? field.Variables : null;
                var rows = GetParameter<int>(field, "Rows");
                <InputTextArea Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                               Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel 
                               Variables="@variables" Rows="@rows"
                               OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText
                />
            }
            break;
        case FormInputType.Template:
        {
            var value = GetValue<string>(field.Name);
            var options = GetParameter<List<ListOption>>(field, "Options");
            if (options?.Any() == true)
            {
                <InputSelect Label="Template" ValueChanged="@(x => UpdateTemplateCode(x, field))" 
                             Options="options" BlankClearLabel="true" AllowClear="true" />
            }
            <InputCode Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                       Validators=@field.Validators Variables=@field.Variables Placeholder="@field.Placeholder" HideLabel=@hideLabel 
                       Language="liquid" OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
        }
            break;
        case FormInputType.Password:
            {
                var value = GetValue<string>(field.Name) ?? "";
                <InputPassword Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
    Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.LogView:
            {
                var value = GetValue<string>(field.Name) ?? "";
                var refreshUrl = GetParameter<string>(field, nameof(InputLogView.RefreshUrl)) ?? "";
                var refreshSeconds = GetParameter<int>(field, nameof(InputLogView.RefreshSeconds));
                <InputLogView Field=@field Label="@label" Value="@value" RefreshUrl="@refreshUrl"
    RefreshSeconds="@refreshSeconds" Placeholder="@field.Placeholder" HideLabel=@hideLabel Help=@field.HelpText />
            }
            break;
        case FormInputType.Int:
            {
                var value = GetValue<int>(field.Name);
                var min = GetParameter<int>(field, "Min");
                var max = GetParameter<int>(field, "Max");
                if (min == 0 && max == 0)
                {
                    (min, max) = GetRange(field);
                }
                var zeroAsEmpty = GetParameter<bool>(field, "ZeroAsEmpty");
                <InputNumber TItem="int" Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                             Validators=@field.Validators Placeholder="@field.Placeholder" Min="@min" Max="@max" HideLabel=@hideLabel 
                             OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText ZeroAsEmpty="@zeroAsEmpty" />
            }
            break;
        case FormInputType.IconPicker:
        {
            var value = GetValue<string>(field.Name);
            <InputIconPicker Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                         Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel 
                         OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText  />
        }
            break;
        case FormInputType.MathValue:
        {
            var value = GetValue<string>(field.Name);
            <InputMathValue Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))" 
                                Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
        }
            break;
        case FormInputType.NumberPercent:
        {
            var value = GetValue<NumberPercent>(field.Name) ?? new ();
            var unit = GetParameter<string>(field, nameof(InputNumberPercent.Unit));
            <InputNumberPercent Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))" Unit="@unit"
                         Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
        }
            break;
        case FormInputType.Period:
        {
            var value = GetValue<int>(field.Name);
            <InputPeriod Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                         Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
        }
            break;
        case FormInputType.FileSize:
        {
            var value = GetValue<long>(field.Name);
            <InputFileSize Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                         Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
        }
            break;
        case FormInputType.Float:
        {
            var value = GetValue<float>(field.Name);
            float min = GetParameter<int>(field, "Min");
            float max = GetParameter<int>(field, "Max");
            if (min == 0 && max == 0)
            {
                (min, max) = GetRange(field);
            }
            <InputNumber TItem="float" Field=@field Label="@label" Value="@value" ReadOnly=@readOnly 
                         ValueChanged="@(x => UpdateValue(field, x))"
                         Validators=@field.Validators Placeholder="@field.Placeholder" Min="@min" Max="@max" 
                         HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
        }
            break;
        case FormInputType.Checklist:
            {
                var value = GetValue<List<object>>(field.Name);
                var listOnly = GetParameter<bool>(field, "ListOnly");
                var options = GetParameter<List<ListOption>>(field, nameof(InputChecklist.Options));
                <InputChecklist Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                                Validators=@field.Validators Options="@options" HideLabel=@hideLabel ListOnly=@listOnly OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.MultiSelect:
        {
            var value = GetValue<List<object>>(field.Name);
            var options = GetParameter<List<ListOption>>(field, nameof(InputMultiSelect.Options));;
            var labelAny = GetParameter<string>(field, nameof(InputMultiSelect.LabelAny));
            var anyOrAll = GetParameter<bool>(field, "AnyOrAll");
            @* ReSharper disable once CSharpWarnings::CS8619 *@
            <InputMultiSelect Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))" 
                              AnyOrAll="anyOrAll" LabelAny="@labelAny"
                              Validators=@field.Validators Options="@options" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            @* ReSharper restore CSharpWarnings::CS8619 *@
        }
            break;
        case FormInputType.TagSelection:
        {
            var value = GetValue<List<Guid>>(field.Name);
            <InputTagSelect Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))" 
                              Validators=@field.Validators  HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
        }
            break;
        case FormInputType.Slider:
            {
                var value = GetValue<int>(field.Name);
                int min = GetParameter<int>(field, nameof(InputSlider.Min));
                int max = GetParameter<int>(field, nameof(InputSlider.Max));
                bool inverse = GetParameter<bool>(field, nameof(InputSlider.Inverse));
                if (min == 0 && max == 0)
                {
                    (min, max) = GetRange(field);
                }
                <InputSlider Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                             Validators=@field.Validators Placeholder="@field.Placeholder" Min="@min" Max="@max" 
                             Inverse=@inverse HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.Switch:
            {
                var value = GetValue<bool>(field.Name);
                bool inverse = GetParameter<bool>(field, nameof(InputSwitch.Inverse));
                <InputSwitch Field=@field Label="@label" Value="@value" Inverse=@inverse ReadOnly=@readOnly Disabled="@readOnly" ValueChanged="@(x => UpdateValue(field, x))"
                             Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.Widget:
            {
                var value = GetValue<bool>(field.Name);
                var pType = GetParameter<WidgetType>(field, nameof(InputWidget.Type));
                <InputWidget Field=@field Label="@label"  HideLabel=@hideLabel Type=@pType Value=@value ValueChanged="@(x => UpdateValue(field, x))" Help=@field.HelpText />
            }
            break;
        case FormInputType.StringArray:
            {
                var value = GetValue<string[]>(field.Name, new string[] { });
                <InputArray Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
    Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.Select:
            {
                var value = GetValue<object>(field.Name, "");
                bool allowClear = GetParameter<bool>(field, nameof(InputSelect.AllowClear), true);
                bool showDescription= GetParameter<bool>(field, nameof(InputSelect.ShowDescription), true);
                var options = GetParameter<List<FileFlows.Plugin.ListOption>>(field, "Options");
                <InputSelect Field=@field Label="@label" Value="@value" ReadOnly=@readOnly Options=@options AllowClear=@allowClear
                             ValueChanged="@(x => UpdateValue(field, x))" Placeholder="@field.Placeholder" 
                             ShowDescription=@showDescription HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.DropDown:
        {
            var value = GetValue<object>(field.Name, "");
            bool allowClear = GetParameter<bool>(field, nameof(InputSelect.AllowClear), true);
            bool showDescription= GetParameter<bool>(field, nameof(InputSelect.ShowDescription), true);
            var options = GetParameter<List<FileFlows.Plugin.ListOption>>(field, "Options");
            <InputDropDown Field=@field Label="@label" Value="@value" ReadOnly=@readOnly Options=@options AllowClear=@allowClear
                         ValueChanged="@(x => UpdateValue(field, x))" Placeholder="@field.Placeholder" 
                         ShowDescription=@showDescription HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
        }
            break;
        case FormInputType.Combobox:
            {
                var value = GetValue<string>(field.Name, "");
                var options = GetParameter<List<FileFlows.Plugin.ListOption>>(field, "Options");
                <InputCombobox Field=@field Label="@label" Value="@value" ReadOnly=@readOnly Options=@options
                             ValueChanged="@(x => UpdateValue(field, x))" Placeholder="@field.Placeholder" 
                             HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.File:
            {
                var value = GetValue<string>(field.Name, "");
                var extensions = GetParameter<List<string>>(field, "Extensions")?.ToArray();
                <InputFile Field=@field Label="@label" Value="@value" ReadOnly=@readOnly Extensions=@extensions Validators=@field.Validators
                           ValueChanged="@(x => UpdateValue(field, x))" Variables=@field.Variables 
                           Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.Folder:
            {
                var value = GetValue<string>(field.Name, "");
                <InputFile Field=@field Label="@label" Value="@value" ReadOnly=@readOnly Directory=@true Validators=@field.Validators
                           ValueChanged="@(x => UpdateValue(field, x))" Variables=@field.Variables  
                           Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.Code:
            {
                var value = GetValue<string>(field.Name);
                var language = GetParameter<string>(field, nameof(InputCode.Language));
                <InputCode Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                           Validators=@field.Validators Variables=@field.Variables Placeholder="@field.Placeholder" HideLabel=@hideLabel 
                           OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText Language="@language" />
            }
            break;
        case FormInputType.Schedule:
            {
                var value = GetValue<string>(field.Name);
                <InputSchedule Field=@field Label="@label" Value="@value" ReadOnly=@readOnly 
                               ValueChanged="@(x => UpdateValue(field, x))" HideLabel=@hideLabel 
                               OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.KeyValue:
            {
                var value = GetValue<List<KeyValuePair<string, string>>>(field.Name);
                var options = GetParameter<List<ListOption>>(field, nameof(InputKeyValue.Options));
                var showVariables = GetParameter<bool>(field, nameof(InputKeyValue.ShowVariables));
                var allowDuplicates = GetParameter<bool>(field, nameof(InputKeyValue.AllowDuplicates));
                hideLabel = hideLabel || string.IsNullOrEmpty(Translater.Instant(label));
                <InputKeyValue Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                               Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel Options="@options" AllowDuplicates="@allowDuplicates"
                               Variables=@field.Variables ShowVariables=@showVariables OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.KeyValueInt:
        {
            var value = GetValue<List<KeyValuePair<int, string>>>(field.Name);
            hideLabel = hideLabel || string.IsNullOrEmpty(Translater.Instant(label));
            var hideKeyValueLabels = GetParameter<bool>(field, nameof(InputKeyValueInt.HideKeyValueLabels));
            <InputKeyValueInt Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                              Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel HideKeyValueLabels="@hideKeyValueLabels"
                              OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
        }
            break;
        case FormInputType.TextLabel:
            {
                var error = GetParameter<bool>(field, nameof(InputTextLabel.Error));
                if (field.ReadOnlyValue is string strValue)
                {
                    <InputTextLabel Label="@label" Value="@strValue" HideLabel=@hideLabel Help=@field.HelpText Error="@error" />
                }
                else
                {
                    object oValue = GetValue<object>(field.Name);
                    var pre = GetParameter<bool>(field, nameof(InputTextLabel.Pre));
                    var link = GetParameter<bool>(field, nameof(InputTextLabel.Link));
                    var formatter = GetParameter<string>(field, nameof(InputTextLabel.Formatter));
                    <InputTextLabel Field=@field Label="@label" Value="@oValue" HideLabel=@hideLabel Error="@error"
                                    Pre=@pre Link=@link Formatter="@formatter" Help=@field.HelpText/>
                }
            }
            break;
        case FormInputType.Date:
        {
            var value = GetValue<DateTime>(field.Name);
            <InputDate Field=@field Label="@label" Value="@value" ReadOnly=@readOnly 
                       ValueChanged="@(x => UpdateValue(field, x))" HideLabel=@hideLabel 
                       OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
        }
            break;
        case FormInputType.DateCompare:
        {
            var value = GetValue<DateCompareModel>(field.Name);
            <InputDateCompare Field=@field Label="@label" Value="@value" ReadOnly=@readOnly 
                            ValueChanged="@(x => UpdateValue(field, x))" HideLabel=@hideLabel 
                            OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
        }
            break;
        case FormInputType.DateRange:
        {
            var value = GetValue<DateRange>(field.Name);
            <InputDateRange Field=@field Label="@label" Value="@value" ReadOnly=@readOnly 
                       ValueChanged="@(x => UpdateValue(field, x))" HideLabel=@hideLabel 
                       OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
        }
            break;
        case FormInputType.Time:
        {
            var value = GetValue<TimeSpan>(field.Name);
            <InputTime Field=@field Label="@label" Value="@value" ReadOnly=@readOnly 
                           ValueChanged="@(x => UpdateValue(field, x))" HideLabel=@hideLabel 
                           OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
        }
            break;
        case FormInputType.ExecutedNodes:
            {
                var oValue = GetValue<List<ExecutedNode>>(field.Name);
                var log = GetParameter<string>(field, nameof(InputExecutedNodes.Log));
                <InputExecutedNodes Field=@field Label="@label" Value="@oValue" HideLabel=@hideLabel Log=@log />
            }
            break;
        case FormInputType.Flow:
        {
            <InputExecutedFlowsRenderer Model="Editor?.Model" />
        }
            break;
        case FormInputType.ExecutedFlowElementsRenderer:
        {
            var oValue = GetValue<List<ExecutedNode>>(field.Name);
            <InputExecutedFlowElementsRenderer Model="Editor?.Model" Value="@oValue" />
        }
            break;
        case FormInputType.Metadata:
            {
                var oValue = GetValue<Dictionary<string, object>>(field.Name);
                <InputMetadata Field=@field Label="@label" Value="@oValue" HideLabel=@hideLabel />
            }
            break;
        case FormInputType.Table:
            {
                var columns = GetParameter<List<InputTableColumn>>(field, nameof(InputTable.Columns), new List<InputTableColumn>());
                var type = GetParameter<Type>(field, nameof(InputTable.TableType));
                Type genericListType = typeof(List<>).MakeGenericType(type);
                var oValue = GetValue(field.Name, genericListType);
                var selectAction = GetParameter<Action<object>>(field, nameof(InputTable.SelectAction));
                if(oValue == null)
                {
                    oValue = Activator.CreateInstance(genericListType);
                }
                <InputTable Field=@field Label="@label" Value="@oValue" HideLabel=@hideLabel TableType=@type Columns=@columns SelectAction=@selectAction />
            }
            break;
        case FormInputType.Html: 
            {
                var html = GetValue<string>(field.Name);
                <div class="input-html">
                    @((MarkupString)html)
                </div>   
            }
            break;
        case FormInputType.Label:
            {
                <div class="input-label">
                    @Translater.TranslateIfNeeded(label)
                </div>
            }
            break;
        case FormInputType.HorizontalRule:
            {
                <div class="input-horizontal-rule"></div>
            }
            break;
        case FormInputType.Hidden:
            break;
        default:
            {
                <span>couldnt find type @field.InputType</span>
            }
            break;
    }
    }