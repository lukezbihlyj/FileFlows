@namespace FileFlows.Client.Components.Dialogs
@inherits VisibleEscapableComponent

@if (Templates != null)
{
    <Modal Title="@lblTitle" Visible="Visible" Styling="width:min(100vw, 60rem);max-width: unset;max-height: unset;">
        <Body>
        <div class="wrapper">
        <div class="top-bar">
            <div class="tag-filter">
                <div class="top-level-tag">
                    @foreach (var tag in Tags)
                    {
                        if (tag.IndexOf(":", StringComparison.Ordinal) > 0)
                        {
                            continue;
                        }
                        <span class="tag @(SelectedTag == tag ? "selected" : string.Empty)" @onclick="((ev) => ToggleTag(ev, tag))">@tag</span>
                    }
                </div>
                @if (SelectedTag.Any())
                {
                    <div class="sub-tags">
                        @foreach (var tag in Tags.Where(x => x.StartsWith(SelectedTag + ":")))
                        {
                            <span class="tag @(SelectedSubTag == tag ? "selected" : string.Empty)" @onclick="((ev) => ToggleSubTag(ev, tag))">@tag.Substring(tag.IndexOf(":") + 1)</span>
                        }
                    </div>
                }
            </div>
            <div class="filter">
                <input type="text" id="flow-template-picker-filter" placeholder="@lblFilter" @bind-value="FilterText" @bind-value:event="oninput" @onkeydown="FilterKeyDown" autocomplete="off" />
                <i class="fas fa-search" @onclick="() => Filter()"></i>
            </div>
        </div>
        <div class="templates">
            @foreach (var template in FilteredTemplates)
            {
                if (string.IsNullOrEmpty(SelectedTag) == false)
                {
                    if (template.Tags.Contains(SelectedTag) == false)
                    {
                        continue;
                    }
                    if (string.IsNullOrEmpty(SelectedSubTag) == false && template.Tags.Contains(SelectedSubTag) == false)
                    {
                        continue;
                    }
                }
                if (SelectedTag != "Local" && template.Tags.Contains("Local"))
                {
                    // only show local when local is selected
                    continue;
                }
                <FlowTemplateItem Template="@template" Selected="@(Selected == template)"
                                  OnClick="@((_, _) => SelectTemplate(template))"
                                  OnDoubleClick="@((_, _) => SelectTemplate(template, true))"/>
            }
        </div>
        </div>
        </Body>
        <Footer>
            <button id="flow-template-picker-button-open" @onclick=@Open class="btn-open btn" disabled="@(Selected?.Path?.StartsWith("local:") != true)">@lblOpen</button>
            <button id="flow-template-picker-button-next" @onclick=@New class="btn" disabled="@(Selected == null)">@lblNext &gt;</button>
            <button id="flow-template-picker-button-close" @onclick=@Cancel class="btn">@lblCancel</button>
        </Footer>
    </Modal>
}